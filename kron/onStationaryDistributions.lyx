#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{algorithm,algpseudocode}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
On Stationary Distributions for Auto-ATC
\end_layout

\begin_layout Author
Zouhair Mahboubi
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The goal of this note is to outline how to compute the stationary distribution
 for a continuous-time MDP.
\end_layout

\begin_layout Standard
We will discuss stationary distributions for a Markov chain and how they
 relate to a CTBN, then give a methodology to compute them for CTMDPs.
\end_layout

\begin_layout Subsection
Definitions and Notation
\end_layout

\begin_layout Standard
We use similar notation as used in the note on Kronecker sums.
\end_layout

\begin_layout Subsection
Markov Chain 
\end_layout

\begin_layout Standard
A Markov chain described by a transition matrix 
\begin_inset Formula $P$
\end_inset

 has a (steady-state) stationary distribution 
\begin_inset Formula $\theta^{\intercal}$
\end_inset

 which satisfies:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\theta^{\intercal}P=0
\end{equation}

\end_inset

There are different ways to find 
\begin_inset Formula $\pi^{\intercal}$
\end_inset

, but the most straight forward is the power iteration method where we start
 with any valid distribution 
\begin_inset Formula $\theta_{0}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\theta^{\intercal}=\lim_{k\to\infty}\theta_{0}^{\intercal}P^{k}
\]

\end_inset


\end_layout

\begin_layout Subsection
CTBN
\end_layout

\begin_layout Standard
A CTBN described by a rate matrix 
\begin_inset Formula $Q$
\end_inset

 has a (steady-state) stationary distribution 
\begin_inset Formula $\alpha^{\intercal}$
\end_inset

 
\begin_inset Foot
status open

\begin_layout Plain Layout
conditions of existence are beyond the scope of this note
\end_layout

\end_inset

 which satisfies:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\alpha^{\intercal}Q=0\label{eq:CTBN}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
An interesting fact is that If 
\begin_inset Formula $Q$
\end_inset

 is factored into its underlying Markov chain matrix 
\begin_inset Formula $P$
\end_inset

 and sojourn matrix 
\begin_inset Formula $M$
\end_inset

 using 
\begin_inset Formula $Q=M(P-I)$
\end_inset

, the stationary distributions for 
\begin_inset Formula $Q$
\end_inset

 and 
\begin_inset Formula $P$
\end_inset

 are related as follow:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\alpha=M^{-1}\theta
\]

\end_inset

This can be used to verify the methodology we present later for simple problems
 where 
\begin_inset Formula $P$
\end_inset

 is readily available.
 The proof is as follow (Note that 
\begin_inset Formula $M$
\end_inset

 is diagonal and therefore symmetric)
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\alpha^{\intercal}Q & = & \theta^{\intercal}M^{-\intercal}M(P-I)\\
 & = & \theta^{\intercal}(P-I)\\
 & = & \theta^{\intercal}-\theta^{\intercal}\\
 & = & 0
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Unfortunately, power iteration does not work to find the null vector.
 Luckily, Dianne 
\begin_inset Foot
status open

\begin_layout Plain Layout
Oâ€™leary, Dianne P.
 Iterative methods for finding the stationary vector for Markov chains.
 Springer New York, 1993
\end_layout

\end_inset

 describes a neat trick for finding the null-space vector.
 Although the method is for a Markov chain, in the process it is (unknowingly)
 transformed into a CTBN.
 The idea is that to solve the rank deficient linear system described in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:CTBN"

\end_inset

, the problem is transformed by replacing any column 
\begin_inset Formula $j$
\end_inset

 of 
\begin_inset Formula $Q$
\end_inset

 by a random non-zero vector 
\begin_inset Formula $w$
\end_inset

 to obtain 
\begin_inset Formula $\tilde{Q},$
\end_inset

 and enforcing 
\begin_inset Formula $\alpha^{\intercal}w=1$
\end_inset

.
 This yields a linear system of the form 
\begin_inset Formula $\alpha^{T}\tilde{Q}=e_{j}^{\intercal}.$
\end_inset

 This linear system can then be solved using iterative methods such as the
 Jacobi method:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\alpha_{k+1}^{T}\leftarrow(e_{j}^{\intercal}-\alpha_{k}^{T}(L+U))D^{-1}
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $D,L,U$
\end_inset

 are the diagonal, lower triangle, and upper triangle portions of 
\begin_inset Formula $\tilde{Q}$
\end_inset

.
 Note that this yields a null vector up to a constant.
 If we choose 
\begin_inset Formula $w=\vec{1},$
\end_inset

 the result should be a valid probability distribution since 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $\alpha^{\intercal}w=\sum\alpha_{i}=1$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 (assuming 
\begin_inset Formula $\alpha$
\end_inset

 indeed exists, we expect that 
\begin_inset Formula $\alpha_{i}\geq0$
\end_inset

 will follow).
\end_layout

\begin_layout Standard
As for guarantees of convergence, there are none...
 Seriously though, according to the Wiki entry on Jacobi iteration, convergence
 is guaranteed if the matrix is irreducibly diagonally dominant.
 The original 
\begin_inset Formula $Q$
\end_inset

 is weakly diagonally dominant by construction.
 However, this is not necessarily the case for 
\begin_inset Formula $\tilde{Q},$
\end_inset

 so we might have to be more careful about how we choose 
\begin_inset Formula $w$
\end_inset

.
\end_layout

\begin_layout Subsection
CTMDP
\end_layout

\begin_layout Standard
A CTMDP is described by a set of rate matrices 
\begin_inset Formula $Q_{a}$
\end_inset

, one for each action 
\begin_inset Formula $a\in\mathcal{A}.$
\end_inset

 Finding the stationary distribution 
\begin_inset Formula $\alpha_{\pi}$
\end_inset

 under a policy 
\begin_inset Formula $a=\pi(s)$
\end_inset

 requires computing the left null vector of the matrix 
\begin_inset Formula $Q_{\pi}$
\end_inset

, whose 
\begin_inset Formula $i$
\end_inset

th row is given by the 
\begin_inset Formula $i$
\end_inset

th row of 
\begin_inset Formula $Q_{\pi(i)}$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
 Overloading 
\begin_inset Formula $\pi$
\end_inset

 to operate on the state numbering of 
\begin_inset Formula $s$
\end_inset

 
\end_layout

\end_inset

.
 Once 
\begin_inset Formula $Q_{\pi}$
\end_inset

 is obtained, we can use the Jacobi method described previously to solve
 for 
\begin_inset Formula $\alpha_{\pi}$
\end_inset

.
\end_layout

\begin_layout Standard
Although the problem is well defined, the difficulty lies in the fact that
 we need to compute 
\begin_inset Formula $Q_{\pi}$
\end_inset

 in order to carry-out the Jacobi iterations.
 For large problems, this is of course not feasible.
\end_layout

\begin_layout Standard
Previously, we were able to get around this problem for value iteration
 by only computing the relevant row of 
\begin_inset Formula $Q$
\end_inset

.
 This was possible because each iteration of Gauss-Seidel computes a new
 component of the value function and olnly involves one row of 
\begin_inset Formula $Q_{\pi}$
\end_inset

 at a time.
 In contrast, computing just one component of 
\begin_inset Formula $\alpha_{k+1}$
\end_inset

requires a column from 
\begin_inset Formula $Q_{\pi}$
\end_inset

, which involves knowing all of the actions of the policy.
 Unfortunately, the methodology we described previously for value iteration
 only works for efficiently computing the rows.
\end_layout

\begin_layout Standard
But we can overcome this problem by computing the vector-Matrix product
 involved in the Jacobi iteration in batch mode.
 The algorithm is as follow
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
Require{Policy $
\backslash
pi$, rate matrices $
\backslash
{Q_a
\backslash
}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$n 
\backslash
leftarrow $ state-space size}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
alpha_0 
\backslash
leftarrow [
\backslash
frac{1}{n}]_n$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$w 
\backslash
leftarrow [1]_{n}$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$d 
\backslash
leftarrow [0]_{n}$}
\end_layout

\begin_layout Plain Layout


\backslash
While{not converged}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
alpha_1 
\backslash
leftarrow [0]_n$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
alpha_1[j] 
\backslash
leftarrow 1$}
\end_layout

\begin_layout Plain Layout


\backslash
For{$i 
\backslash
in 1:n$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$q 
\backslash
leftarrow Q_{
\backslash
pi(i)}[i,:]$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$q[j] 
\backslash
leftarrow w[j]$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$d[i] 
\backslash
leftarrow 1/q[i]$ }
\backslash
label{diq}
\end_layout

\begin_layout Plain Layout


\backslash
State{$q[i] 
\backslash
leftarrow 0$}
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
alpha_1 
\backslash
leftarrow 
\backslash
alpha_1 - 
\backslash
alpha_0[i] q$}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
EndFor
\end_layout

\begin_layout Plain Layout


\backslash
State{$
\backslash
alpha_0 
\backslash
leftarrow 
\backslash
alpha_1 
\backslash
odot d$}
\end_layout

\begin_layout Plain Layout


\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
State{}
\end_layout

\begin_layout Plain Layout


\backslash
Return{$
\backslash
frac{
\backslash
alpha_0}{||
\backslash
alpha_0||}$}
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Jacobi Iteration for CTMDP
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A few comments:
\end_layout

\begin_layout Itemize
Line 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ref{diq}
\end_layout

\end_inset

 only needs to be done on the first outer loop iteration
\end_layout

\begin_layout Itemize
Unlike Gauss-Seidel, this requires double-storage since we can't do this
 in place.
 
\end_layout

\begin_layout Itemize
The choice of the 
\begin_inset Formula $w$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

 is arbitrary and is only there in order to modify the Jacobi method to
 work for finding a null vector.
 Although we might have to be more judicious in our choice to guarantee
 convergence.
\end_layout

\begin_layout Standard
Otherwise, as long as we are able to compute 
\begin_inset Formula $q$
\end_inset

, the 
\begin_inset Formula $i$
\end_inset

th row of 
\begin_inset Formula $Q_{\pi(i)}$
\end_inset

, this should be computationally tractable.
 
\end_layout

\begin_layout Standard
The one hickup is that for factored CTMDPs, we cannot swap the order of
 the actions (unlike in Value Iteration).
 This creates a slight complexity since our methodology for finding rows
 of Kronecker sums assumed a certain structure.
 Luckily, it turns out that the result we had can be generalized as follow:
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula 
\begin{equation}
A_{1}\oplus A_{2}\dots\oplus A_{K}=\sum_{u=1}^{K}P_{(n^{u},n^{K-u})}\left(I_{n^{K-1}}\otimes A_{i}\right)P_{(n^{u},n^{K-u})}^{\intercal}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Computing a given row of the above series of Kronecker sum turns out to
 only require a small change to the algorithm that we used previously.
\end_layout

\end_body
\end_document
